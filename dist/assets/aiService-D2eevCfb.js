const n="http://localhost:8081";class o{baseUrl;constructor(t=n){this.baseUrl=t}async trainStudent(t){try{const r=await fetch(`${this.baseUrl}/train/${t}`,{method:"POST",headers:{"Content-Type":"application/json"}}),e=await r.json();if(!r.ok)throw new Error(e.message||"Training request failed");return e}catch(r){return console.error("AI training error:",r),{success:!1,message:"Failed to start training",error:r instanceof Error?r.message:"Unknown error"}}}async verifySignature(t,r){try{const e=new FormData;e.append("file",t),r&&e.append("session_id",r.toString());const s=await fetch(`${this.baseUrl}/verify`,{method:"POST",body:e}),a=await s.json();if(!s.ok)throw new Error(a.message||"Verification request failed");return a}catch(e){return console.error("AI verification error:",e),{success:!1,match:!1,predicted_student_id:null,score:0,decision:"error",message:"Failed to verify signature",error:e instanceof Error?e.message:"Unknown error"}}}async verifySignatureFromDataURL(t,r){try{const s=await(await fetch(t)).blob(),a=new File([s],"signature.png",{type:"image/png"});return this.verifySignature(a,r)}catch(e){return console.error("Error converting data URL to file:",e),{success:!1,match:!1,predicted_student_id:null,score:0,decision:"error",message:"Failed to process signature image",error:e instanceof Error?e.message:"Unknown error"}}}async healthCheck(){try{const t=await fetch(`${this.baseUrl}/health`),r=await t.json();return{status:r.status||"unknown",healthy:t.ok&&r.status==="healthy"}}catch(t){return console.error("AI service health check failed:",t),{status:"error",healthy:!1}}}}const c=new o;export{c as a};
